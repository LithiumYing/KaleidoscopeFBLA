"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import dj_database_url
from dotenv import load_dotenv, find_dotenv
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

DEBUG = False

ALLOWED_HOSTS = [".herokuapp.com"]  # this is super unsafe


# Application definition
AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",  # Required for GraphiQL
    "graphene_django",
    "fbla",
    "django_apscheduler",
    "dbbackup",
]
X_FRAME_OPTIONS = "SAMEORIGIN"
GRAPHENE = {
    "SCHEMA": "fbla.schema.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}
GRAPHENE_GENERATOR_MODELS = [
    {"name": "Student", "path": "fbla.models.Student"},
    {"name": "Event", "path": "fbla.models.Event"},
    {"name": "Prize", "path": "fbla.models.Prize"},
    {"name": "AvailableStudent", "path": "fbla.models.AvailableStudent"},
    {"name": "BonusPoints", "path": "fbla.models.BonusPoints"},
]
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "fbla.middleware.help_button_middleware.HelpButtonMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

import django_on_heroku

if "SECRET_KEY" not in os.environ:
    load_dotenv(dotenv_path=find_dotenv())
django_on_heroku.settings(locals())

DATABASES = {
    "default": dj_database_url.config(
        conn_max_age=600,
        conn_health_checks=True,
    ),
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_ROOT = BASE_DIR / "media"

MEDIA_URL = "https://kaleidoscope.nyc3.cdn.digitaloceanspaces.com/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": False,  # True in production
    "JWT_EXPIRATION_DELTA": timedelta(days=5),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=5),
}

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"


# digital ocean file storage stuff
AWS_S3_ACCESS_KEY_ID = os.environ.get("AWS_S3_ACCESS_KEY_ID")
AWS_S3_SECRET_ACCESS_KEY = os.environ.get("AWS_S3_SECRET_ACCESS_KEY")
AWS_S3_REGION_NAME = "nyc3"
AWS_S3_ENDPOINT_URL = f"https://{AWS_S3_REGION_NAME}.digitaloceanspaces.com"
AWS_STORAGE_BUCKET_NAME = "kaleidoscope"
AWS_S3_CUSTOM_DOMAIN = (
    f"{AWS_STORAGE_BUCKET_NAME}.{AWS_S3_REGION_NAME}.digitaloceanspaces.com"
)
AWS_DEFAULT_ACL = "public-read"

DBBACKUP_STORAGE = DEFAULT_FILE_STORAGE
DBBACKUP_STORAGE_OPTIONS = {
    "access_key": AWS_S3_ACCESS_KEY_ID,
    "secret_key": AWS_S3_SECRET_ACCESS_KEY,
    "endpoint_url": AWS_S3_ENDPOINT_URL,
    "bucket_name": AWS_STORAGE_BUCKET_NAME,
    "default_acl": "public-read",
    "region_name": AWS_S3_REGION_NAME,
    "location": "backups/",
}
DBBACKUP_CONNECTORS = {
    "default": {
        "DUMP_SUFFIX": "--exclude-schema=heroku_ext",
        "RESTORE_SUFFIX": "--exclude-schema=heroku_ext",
    }
}
